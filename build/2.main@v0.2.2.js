(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{34:function(n,a,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var s=t(1),l=t(0),p=t(39),e=t(40),i=function(){function n(){}return n=(0,s.__decorate)([(0,l.Component)({selector:"html-drag",template:e.default,styles:[p.default]})],n)}();a.default=i},39:function(n,a,t){"use strict";t.r(a),a.default=""},40:function(n,a,t){"use strict";t.r(a),a.default='<h2>\n    HTML 接口 / 拖拽\n</h2>\n<p>\n    设置元素属性 draggable=true 即可让元素能够拖放\n</p>\n<h3>\n    拖放源\n</h3>\n<p>\n    也就是被拖放的元素，其中可以定义如下事件：\n</p>\n<ul>\n    <li>\n        <span class="important">dragstart</span>\n        ：拖放源开始被拖放时触发。\n    </li>\n    <li>\n        <span class="important">drag</span>\n        ：拖放源被拖放的过程中触发。\n    </li>\n    <li>\n        <span class="important">dragend</span>\n        ：拖放源在拖放结束时触发。\n    </li>\n</ul>\n<h3>\n    拖放目标\n</h3>\n<p>\n    也就是被拖放的元素到达的目标元素，其中可以定义如下事件：\n</p>\n<ul>\n    <li>\n        <span class="important">dragenter</span>\n        ：拖放源进入元素边界时触发。\n    </li>\n    <li>\n        <span class="important">dragleave</span>\n        ：拖放源离开元素边界时触发。\n    </li>\n    <li>\n        <span class="important">dragover</span>\n        ：拖放源在元素内部时不断被触发。\n    </li>\n    <li>\n        <span class="important">drop</span>\n        ：拖放源被释放到元素内部时触发。\n    </li>\n</ul>\n<button ui-goto-example=\'drag\'>查看用例>>></button>\n'}}]);