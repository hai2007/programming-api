(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{33:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var p=t(1),h=t(0),i=t(48),a=function(){function n(){}return n=(0,p.__decorate)([(0,h.Component)({selector:"html-canvas",template:i.default,styles:[]})],n)}();e.default=a},48:function(n,e,t){"use strict";t.r(e),e.default='<h2>\n    HTML 标签 / Canvas\n</h2>\n<h3>\n    画笔配置\n</h3>\n<h4>\n    fillStyle / strokeStyle\n</h4>\n<p>\n    属性，值应该是一个颜色字符串，分别用于设置图形的填充颜色和图形轮廓的颜色。\n</p>\n<h4>\n    lineWidth\n</h4>\n<p>\n    属性，值应该是一个数字，用于设置线条的粗细程度。\n</p>\n<h4>\n    setLineDash()\n</h4>\n<p>\n    方法，此方法接受一个数组，来指定线段与间隙的交替。例如：\n</p>\n<pre ui-code>\n    painter.setLineDash([20, 5]);  // [实线长度, 间隙长度]\n</pre>\n<h4>\n    font\n</h4>\n<p>\n    属性，值应该是一个拼接了文字大小和字体的字符串，用于设置文字大小和字体。例如：\n</p>\n<pre ui-code>\n    painter.font = "100px sans-serif";\n</pre>\n<h4>\n    textAlign / textBaseline\n</h4>\n<p>\n    属性，值应该是一个字符串，分别用于设置文字的水平和垂直对齐方式。\n</p>\n<p>\n    水平方向上，可选的值包括：start、end、left、right、center，默认值是start。\n</p>\n<p>\n    垂直方向上，可选的值包括：top、hanging、middle、alphabetic、ideographic、bottom，默认值是alphabetic。\n</p>\n<h3>\n    direction\n</h3>\n<p>\n    属性，设置文字的书写方向，可能的值包括：ltr、rtl、inherit，默认值是inherit。\n</p>\n<h3>\n    绘制方法\n</h3>\n<h4>\n    save / restore\n</h4>\n<p>\n    一个绘图可能会包含一些属性的设置（比如文字大小等），应用一些变换（即移动、旋转和缩放）等，我们称在某一刻前述的这些的信息为\n    <span class="important">状态</span>。\n</p>\n<p>\n    你可以通过\n    <span class="important">save()</span>方法来保存当前状态，\n    后续操作结束以后，再通过\n    <span class="important">restore()</span>方法恢复之前保存的状态。\n</p>\n<p class=\'warn\'>\n    每当save()方法被调用后，当前的状态就被推送到栈中保存。每一次调用restore()方法，上一个保存的状态就从栈中弹出，所有设定都恢复(类似数组的pop())。\n</p>\n<h4>\n    fillText / strokeText\n</h4>\n<p>\n    分别用于绘制填充文字和轮廓文字，拿fillText举例子，语法如下：\n</p>\n<pre ui-code>\n    painter.fillText(text, x, y);\n</pre>\n<p>\n    在指定的 (x,y) 位置填充指定的文本text。\n</p>\n<h4>\n    fillRect / strokeRect\n</h4>\n<p>\n    分别用于绘制填充矩形和轮廓矩形，，拿fillRect举例子，语法如下：\n</p>\n<pre ui-code>\n    painter.fillRect(x, y, width, height);\n</pre>\n<h4>\n    路径 path\n</h4>\n<p>\n    路径不是一种方法，而是一类方法的集合（路径本身你就可以理解成记录笔在纸上走过的轨迹），在开始之前，你可以先看个例子：\n</p>\n<button ui-goto-example=\'canvas-path\'>查看用例>>></button>\n<p>\n    下面，我们来对常用的方法进行解释。\n</p>\n<h5>\n    beginPath()\n</h5>\n<p>\n    一般在生成路径前都会调用这个方法，不然的话，会接着之前的路径生成。\n</p>\n<h5>\n    moveTo(x,y)\n</h5>\n<p>\n    把画笔移动到指定的坐标，相当于路径的起点。\n</p>\n<h5>\n    lineTo(x,y)\n</h5>\n<p>\n    把画笔移动到指定的坐标，和moveTo不同的是，此时笔没有离开纸。\n</p>\n<h5>\n    closePath()\n</h5>\n<p>\n    相当于调用lineTo方法把路径的终点和起点连起来。\n</p>\n<h5>\n    stroke() / fill()\n</h5>\n<p>\n    路径只是记录了笔的轨迹，要最终可以看见，就需要调用上面的方法告诉画布把记录的路径绘制出来。\n</p>\n'}}]);