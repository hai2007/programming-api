(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{38:function(n,e,p){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=p(1),a=p(0),t=p(53),i=function(){function n(){}return n=(0,r.__decorate)([(0,a.Component)({selector:"css-transform",template:t.default,styles:[]})],n)}();e.default=i},53:function(n,e,p){"use strict";p.r(e),e.default="<h2>\n    CSS 属性&值 / Transform\n</h2>\n<h3>\n    transform: none | transform-functions;\n</h3>\n<p>\n    通过设置该属性的值，我们可以对元素使用转换，下面是具体的属性值。\n</p>\n<p>\n    定义 2D 转换，使用六个值的矩阵：\n</p>\n<pre ui-code>\n    matrix(a,b,c,d,e,f)\n</pre>\n<p>\n    定义 3D 转换，使用 16 个值的 4x4 矩阵：\n</p>\n<pre ui-code>\n    matrix3d(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p)\n</pre>\n<p>\n    定义 2D 转换：\n</p>\n<pre ui-code>\n    translate(x,y)\n</pre>\n<p>\n    定义 3D 转换：\n</p>\n<pre ui-code>\n    translate3d(x,y,z)\n</pre>\n<p>\n    定义转换，只是用 X 轴的值：\n</p>\n<pre ui-code>\n    translateX(x)\n</pre>\n<p>\n    定义转换，只是用 Y 轴的值：\n</p>\n<pre ui-code>\n    translateY(y)\n</pre>\n<p>\n    定义 3D 转换，只是用 Z 轴的值：\n</p>\n<pre ui-code>\n    translateZ(z)\n</pre>\n<p>\n    定义 2D 缩放转换：\n</p>\n<pre ui-code>\n    scale(x,y)\n</pre>\n<p>\n    定义 3D 缩放转换：\n</p>\n<pre ui-code>\n    scale3d(x,y,z)：\n</pre>\n<p>\n    通过设置 X 轴的值来定义缩放转换：\n</p>\n<pre ui-code>\n    scaleX(x)\n</pre>\n<p>\n    通过设置 Y 轴的值来定义缩放转换：\n</p>\n<pre ui-code>\n    scaleY(y)\n</pre>\n<p>\n    通过设置 Z 轴的值来定义 3D 缩放转换：\n</p>\n<pre ui-code>\n    scaleZ(z)\n</pre>\n<p>\n    定义 2D 旋转，在参数中规定角度：\n</p>\n<pre ui-code>\n    rotate(angle)\n</pre>\n<p>\n    定义 3D 旋转：\n</p>\n<pre ui-code>\n    rotate3d(x,y,z,angle)\n</pre>\n<p>\n    定义沿着 X 轴的 3D 旋转：\n</p>\n<pre ui-code>\n    rotateX(angle)\n</pre>\n<p>\n    定义沿着 Y 轴的 3D 旋转：\n</p>\n<pre ui-code>\n    rotateY(angle)\n</pre>\n<p>\n    定义沿着 Z 轴的 3D 旋转：\n</p>\n<pre ui-code>\n    rotateZ(angle)\n</pre>\n<p>\n    定义沿着 X 和 Y 轴的 2D 倾斜转换：\n</p>\n<pre ui-code>\n    skew(x-angle,y-angle)\n</pre>\n<p>\n    定义沿着 X 轴的 2D 倾斜转换：\n</p>\n<pre ui-code>\n    skewX(angle)\n</pre>\n<p>\n    定义沿着 Y 轴的 2D 倾斜转换：\n</p>\n<pre ui-code>\n    skewY(angle)\n</pre>\n<p>\n    为 3D 转换元素定义透视视图：\n</p>\n<pre ui-code>\n    perspective(n)\n</pre>\n<h3>\n    transform-origin: x-axis y-axis z-axis;\n</h3>\n<p>\n    设置元素转换的中心点，最直观的例子旋转图片，改变图片选择依赖的旋转中心。\n</p>\n<h3>\n    transform-style: flat | preserve-3d;\n</h3>\n<p>\n    定义里面转换的元素是在2D平面呈现还是在3D空间呈现，讲的直白些，就是这个元素里面的空间维度是二维还是三维。\n</p>\n<h3>\n    perspective: number | none;\n</h3>\n<p>\n    属性是定义3D元素距试图的距离，设置以后，其子元素会获得透视效果，需要注意的是该值只对3D转换有效，这也是很容易理解的。此外，还可以通过Transform的属性值的方式设置，二者是有一定区别的，你可以认为，前者是把整个看成一个舞台，后者是每一个都是一个舞台。\n</p>\n<h3>\n    perspective-origin: x-axis y-axis;\n</h3>\n<p>\n    必须和perspective一起使用，只对3D转换元素有效，简单的理解就是你的眼睛看的焦点。\n</p>\n<h3>\n    backface-visibility:hidden | visible;\n</h3>\n<p>\n    这个很简单，设置当元素背对着屏幕时候，是否是可见的。\n</p>\n"}}]);