window.__nefbl_pack__bundleSrc__[23]=function(){var n,r={};function e(n,r){for(var e=0;e<r.length;e++){var t=r[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}var t,p,a,i=(0,window.__nefbl_pack__getBundle("1").Component)({selector:"html-canvas",template:window.__nefbl_pack__getBundle("58").default,styles:[]})((t=function n(){!function(n,r){if(!(n instanceof r))throw new TypeError("Cannot call a class as a function")}(this,n)},p&&e(t.prototype,p),a&&e(t,a),Object.defineProperty(t,"prototype",{writable:!1}),n=t))||n;return r.default=i,r},window.__nefbl_pack__bundleSrc__[58]=function(){var n={};return n.default='<div class="doc-view">\r\n    <h2>\r\n        HTML 标签 / Canvas\r\n    </h2>\r\n    <h3>\r\n        画笔配置\r\n    </h3>\r\n    <h4>\r\n        fillStyle / strokeStyle\r\n    </h4>\r\n    <p>\r\n        属性，值应该是一个颜色字符串，分别用于设置图形的填充颜色和图形轮廓的颜色。\r\n    </p>\r\n    <h4>\r\n        lineWidth\r\n    </h4>\r\n    <p>\r\n        属性，值应该是一个数字，用于设置线条的粗细程度。\r\n    </p>\r\n    <h4>\r\n        setLineDash()\r\n    </h4>\r\n    <p>\r\n        方法，此方法接受一个数组，来指定线段与间隙的交替。例如：\r\n    </p>\r\n    <pre ui-code>\r\n        painter.setLineDash([20, 5]);  // [实线长度, 间隙长度]\r\n    </pre>\r\n    <h4>\r\n        font\r\n    </h4>\r\n    <p>\r\n        属性，值应该是一个拼接了文字大小和字体的字符串，用于设置文字大小和字体。例如：\r\n    </p>\r\n    <pre ui-code>\r\n        painter.font = "100px sans-serif";\r\n    </pre>\r\n    <h4>\r\n        textAlign / textBaseline\r\n    </h4>\r\n    <p>\r\n        属性，值应该是一个字符串，分别用于设置文字的水平和垂直对齐方式。\r\n    </p>\r\n    <p>\r\n        水平方向上，可选的值包括：start、end、left、right、center，默认值是start。\r\n    </p>\r\n    <p>\r\n        垂直方向上，可选的值包括：top、hanging、middle、alphabetic、ideographic、bottom，默认值是alphabetic。\r\n    </p>\r\n    <h3>\r\n        direction\r\n    </h3>\r\n    <p>\r\n        属性，设置文字的书写方向，可能的值包括：ltr、rtl、inherit，默认值是inherit。\r\n    </p>\r\n    <h3>\r\n        绘制方法\r\n    </h3>\r\n    <h4>\r\n        save / restore\r\n    </h4>\r\n    <p>\r\n        一个绘图可能会包含一些属性的设置（比如文字大小等），应用一些变换（即移动、旋转和缩放）等，我们称在某一刻前述的这些的信息为\r\n        <span class="important">状态</span>。\r\n    </p>\r\n    <p>\r\n        你可以通过\r\n        <span class="important">save()</span>方法来保存当前状态，\r\n        后续操作结束以后，再通过\r\n        <span class="important">restore()</span>方法恢复之前保存的状态。\r\n    </p>\r\n    <p class=\'warn\'>\r\n        每当save()方法被调用后，当前的状态就被推送到栈中保存。每一次调用restore()方法，上一个保存的状态就从栈中弹出，所有设定都恢复(类似数组的pop())。\r\n    </p>\r\n    <h4>\r\n        fillText / strokeText\r\n    </h4>\r\n    <p>\r\n        分别用于绘制填充文字和轮廓文字，拿fillText举例子，语法如下：\r\n    </p>\r\n    <pre ui-code>\r\n        painter.fillText(text, x, y);\r\n    </pre>\r\n    <p>\r\n        在指定的 (x,y) 位置填充指定的文本text。\r\n    </p>\r\n    <h4>\r\n        fillRect / strokeRect\r\n    </h4>\r\n    <p>\r\n        分别用于绘制填充矩形和轮廓矩形，，拿fillRect举例子，语法如下：\r\n    </p>\r\n    <pre ui-code>\r\n        painter.fillRect(x, y, width, height);\r\n    </pre>\r\n    <h4>\r\n        路径 path\r\n    </h4>\r\n    <p>\r\n        路径不是一种方法，而是一类方法的集合（路径本身你就可以理解成记录笔在纸上走过的轨迹），在开始之前，你可以先看个例子：\r\n    </p>\r\n    <button ui-goto-example=\'canvas-path\'>查看用例>>></button>\r\n    <p>\r\n        下面，我们来对常用的方法进行解释。\r\n    </p>\r\n    <h5>\r\n        beginPath()\r\n    </h5>\r\n    <p>\r\n        一般在生成路径前都会调用这个方法，不然的话，会接着之前的路径生成。\r\n    </p>\r\n    <h5>\r\n        moveTo(x,y)\r\n    </h5>\r\n    <p>\r\n        把画笔移动到指定的坐标，相当于路径的起点。\r\n    </p>\r\n    <h5>\r\n        lineTo(x,y)\r\n    </h5>\r\n    <p>\r\n        把画笔移动到指定的坐标，和moveTo不同的是，此时笔没有离开纸。\r\n    </p>\r\n    <h5>\r\n        closePath()\r\n    </h5>\r\n    <p>\r\n        相当于调用lineTo方法把路径的终点和起点连起来。\r\n    </p>\r\n    <h5>\r\n        stroke() / fill()\r\n    </h5>\r\n    <p>\r\n        路径只是记录了笔的轨迹，要最终可以看见，就需要调用上面的方法告诉画布把记录的路径绘制出来。\r\n    </p>\r\n</div>\r\n',n};