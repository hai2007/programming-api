window.__nefbl_pack__bundleSrc__[27]=function(){var r,n={};function e(r,n){for(var e=0;e<n.length;e++){var s=n[e];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(r,s.key,s)}}var s,o,p,i=(0,window.__nefbl_pack__getBundle("1").Component)({selector:"css-scss",template:window.__nefbl_pack__getBundle("62").default,styles:[]})((s=function r(){!function(r,n){if(!(r instanceof n))throw new TypeError("Cannot call a class as a function")}(this,r)},o&&e(s.prototype,o),p&&e(s,p),Object.defineProperty(s,"prototype",{writable:!1}),r=s))||r;return n.default=i,n},window.__nefbl_pack__bundleSrc__[62]=function(){var r={};return r.default="<div class=\"doc-view\">\r\n    <h2>\r\n        扩展 / Sassy CSS\r\n    </h2>\r\n    <p>\r\n        sass分为两类，其中一种是SCSS（Sassy CSS），是一个 CSS3 语法的扩充版本，本笔记就是选择这种。\r\n    </p>\r\n    <h3>\r\n        Ruby版本的安装和使用\r\n    </h3>\r\n    <p>\r\n        安装好ruby以后，直接在命令行运行下面的命令进行安装：\r\n    </p>\r\n    <pre ui-code>gem install sass</pre>\r\n    <p>\r\n        安装完毕之后，就可以直接运行下面的命令开始使用：\r\n    </p>\r\n    <pre ui-code>sass [--style param] sourceFile.scss targetFile.css</pre>\r\n    <p>\r\n        表示编译sass文件为css文件（其中param可选参数有：nested：嵌套缩进的css代码，它是默认值；expanded：没有缩进的、扩展的css代码；compact：简洁格式的css代码；compressed：压缩后的css代码）。\r\n    </p>\r\n    <p>\r\n        例如：\r\n    </p>\r\n    <pre ui-code>sass --style compressed test.scss test.css</pre>\r\n    <p>\r\n        如果你希望修改scss代码的时候可以自动编译：\r\n    </p>\r\n    <pre ui-code>sass --style compressed --watch test.scss:test.css</pre>\r\n    <h3>\r\n        常用语法\r\n    </h3>\r\n\r\n    <h4>\r\n        变量\r\n    </h4>\r\n    <p>\r\n        以$开头即可定义变量：\r\n    </p>\r\n    <pre ui-code='css'>\r\n    $btn_bgcolor:#222222;\r\n\r\n    input.btn{\r\n        background-color:$btn_bgcolor;\r\n    }\r\n    </pre>\r\n    <p>\r\n        如果变量是用在字符串中，你需要用#{}包裹一下：\r\n    </p>\r\n    <pre ui-code='css'>\r\n    $direction:top;\r\n\r\n    input.btn{\r\n        margin-#{$direction}:10px;\r\n    }\r\n    </pre>\r\n    <h4>\r\n        计算\r\n    </h4>\r\n    <pre ui-code='css'>\r\n    div{\r\n        padding:(14px / 2);\r\n        right: $var * 10%;\r\n    }\r\n    </pre>\r\n    <h4>\r\n        嵌套\r\n    </h4>\r\n    <p>\r\n        类型一：\r\n    </p>\r\n    <pre ui-code='css'>\r\n    //源代码\r\n    div{\r\n        .btn{\r\n            //Todo\r\n        }\r\n    }\r\n    //编译后\r\n    div .btn{\r\n        //Todo\r\n    }\r\n    </pre>\r\n    <p>\r\n        类型二：\r\n    </p>\r\n    <pre ui-code='css'>\r\n    //源代码\r\n    div{\r\n        &.btn{\r\n            //Todo\r\n        }\r\n    }\r\n    //编译后\r\n    div.btn{\r\n        //Todo\r\n    }\r\n    </pre>\r\n    <h4>\r\n        注释\r\n    </h4>\r\n    <p>\r\n        一共支持三种注释：\r\n    </p>\r\n    <ul>\r\n        <li>\r\n            <span class=\"important\">\r\n                /* annotation */\r\n            </span>\r\n            多行注释，会保留到编译后；\r\n        </li>\r\n        <li>\r\n            <span class=\"important\">\r\n                // annotation\r\n            </span>\r\n            单行注释，且只出现在源文件；\r\n        </li>\r\n        <li>\r\n            <span class=\"important\">\r\n                /*! annotation */\r\n            </span>\r\n            多行注释，即使是压缩了也会保留。\r\n        </li>\r\n    </ul>\r\n    <h4>\r\n        继承\r\n    </h4>\r\n    <p>\r\n        现在有了一个公共的按钮样式：\r\n    </p>\r\n    <pre ui-code>\r\n    .btn{\r\n        //按钮的公共样式\r\n    }\r\n    </pre>\r\n    <p>\r\n        你现在要写一个提交按钮，为了在基础按钮基础上开发，你可以写这样的代码：\r\n    </p>\r\n    <pre ui-code='css'>\r\n    .btn-submit{\r\n        @extend .btn;\r\n        //你对提交按钮的特殊样式\r\n    }\r\n    </pre>\r\n    <h4>\r\n        插入文件\r\n    </h4>\r\n    <p>\r\n        编译一般编译主文件，别的文件由主文件引入，比如现在有主文件root.scss，还有一个重置文件_reset.scss（开头的下划线表示这是一个局部文件，并不需要生成对应的独立css文件），你只需要在主文件中添加一行：\r\n    </p>\r\n    <pre ui-code='css'>@import \"./src/reset\";</pre>\r\n    <h4>\r\n        Mixin\r\n    </h4>\r\n    <p>\r\n        说的简单点就是代码模板预定义：\r\n    </p>\r\n    <pre ui-code='css'>\r\n    @mixin bgQuick($url,$bgcolor:red){\r\n        background-repeat: no-repeat;\r\n        background-position: center center;\r\n        background-size: auto auto;\r\n        background-image:url($url);\r\n        background-color:$bgcolor;\r\n    }\r\n    </pre>\r\n    <p>\r\n        使用的时候，出入参数（有缺省值的可以传入也可以不传入）：\r\n    </p>\r\n    <pre ui-code>\r\n    div{\r\n        @include bgQuick('image/smile.png');\r\n    }\r\n    </pre>\r\n    <h4>\r\n        函数\r\n    </h4>\r\n    <pre ui-code='css'>\r\n    @function double($size) {\r\n        @return $size * 2;\r\n    }\r\n\r\n    #sidebar {\r\n       width: double(5px);\r\n    }\r\n    </pre>\r\n    <h4>\r\n        if\r\n    </h4>\r\n    <p>\r\n        sass的@if用not,or,and分别表示非，或，与。\r\n    </p>\r\n    <pre ui-code='css'>\r\n    $flag:1;\r\n    div{\r\n        @if $flag == 1 {\r\n            //Todo\r\n        } @else if($flag > 1 and $flag < 10){\r\n            //Todo\r\n        } @else {\r\n            //Todo\r\n        }\r\n    }\r\n    </pre>\r\n    <h4>\r\n        for\r\n    </h4>\r\n    <pre ui-code='css'>\r\n    @for $i from 0 to $home_nav_num {\r\n        .nav li:nth-child(#{$i + 1}) {\r\n            background-position-y: (0 - $i)*70px - 20px;\r\n        }\r\n    }\r\n    </pre>\r\n    <h4>\r\n        whild\r\n    </h4>\r\n    <pre ui-code='css'>\r\n    $i:0;\r\n    @while $i <  $home_nav_num {\r\n        .nav li:nth-child(#{$i + 1}) {\r\n            background-position-y: (0 - $i)*70px - 20px;\r\n        }\r\n    }\r\n    </pre>\r\n    <h4>\r\n        each\r\n    </h4>\r\n    <pre ui-code='css'>\r\n    @each $i in 1, 2, 3 {\r\n        .nav li:nth-child(#{$i + 1}) {\r\n            background-position-y: (0 - $i)*70px - 20px;\r\n        }\r\n    }\r\n    </pre>\r\n</div>\r\n",r};